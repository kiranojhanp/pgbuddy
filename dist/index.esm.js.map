{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { Sql } from \"postgres\";\n\ninterface SelectParams {\n  table: string;\n  debug?: boolean;\n  columns?: string[];\n  page?: number;\n  pageSize?: number;\n  search?: {\n    columns: string[];\n    query: string;\n  };\n  orderBy?: string;\n}\n\nexport class EasyPG {\n  private sql: Sql<{}>;\n\n  constructor(sql: Sql<{}>) {\n    this.sql = sql;\n  }\n\n  /**\n   * Builds and executes a simple SELECT query.\n   * @param params - Table name and optional columns to select.\n   * @returns The query result.\n   */\n  async select(params: SelectParams) {\n    const {\n      debug = false,\n      table,\n      columns = [\"*\"],\n      orderBy,\n      page = 1,\n      pageSize = 10,\n      search,\n    } = params;\n\n    // Validate the table name and columns\n    if (!table || typeof table !== \"string\" || !table.trim()) {\n      throw new Error(\"Invalid or empty table name\");\n    }\n\n    // Validate columns\n    if (\n      !Array.isArray(columns) ||\n      columns.some((col) => !col || typeof col !== \"string\" || !col.trim())\n    ) {\n      throw new Error(\"Invalid or empty column names\");\n    }\n\n    // Validate search\n    if (\n      search &&\n      (!Array.isArray(search.columns) ||\n        search.columns.some(\n          (col) => !col || typeof col !== \"string\" || !col.trim()\n        ) ||\n        !search.query)\n    ) {\n      throw new Error(\"Invalid search parameters\");\n    }\n\n    // Calculate offset for pagination\n    const offset = (page - 1) * pageSize;\n\n    // Use dynamic query features of js to build the query\n    const query = this.sql`\n    SELECT ${\n      columns.length === 1 && columns[0] === \"*\"\n        ? this.sql`*`\n        : this.sql(columns)\n    }\n    FROM ${this.sql(table)}\n    ${\n      search && search.query && search.columns && Array.isArray(search.columns)\n        ? this.sql`\n            WHERE ${search.columns\n              .map(\n                (col) =>\n                  this.sql`${this.sql(col)} ILIKE ${\"%\" + search.query + \"%\"}`\n              )\n              .reduce((acc, condition, idx) =>\n                idx === 0 ? condition : this.sql`${acc} OR ${condition}`\n              )}\n          `\n        : this.sql``\n    }\n    ${orderBy ? this.sql`ORDER BY ${this.sql`${orderBy}`}` : this.sql``}\n    LIMIT ${pageSize} OFFSET ${offset}\n  `;\n\n    if (debug) await query.describe();\n    const result = await query;\n    return result;\n  }\n}\n"],"mappings":"6MAeO,IAAMA,EAAN,KAAa,CAGlB,YAAYC,EAAc,CACxB,KAAK,IAAMA,CACb,CAOM,OAAOC,EAAsB,QAAAC,EAAA,sBACjC,GAAM,CACJ,MAAAC,EAAQ,GACR,MAAAC,EACA,QAAAC,EAAU,CAAC,GAAG,EACd,QAAAC,EACA,KAAAC,EAAO,EACP,SAAAC,EAAW,GACX,OAAAC,CACF,EAAIR,EAGJ,GAAI,CAACG,GAAS,OAAOA,GAAU,UAAY,CAACA,EAAM,KAAK,EACrD,MAAM,IAAI,MAAM,6BAA6B,EAI/C,GACE,CAAC,MAAM,QAAQC,CAAO,GACtBA,EAAQ,KAAMK,GAAQ,CAACA,GAAO,OAAOA,GAAQ,UAAY,CAACA,EAAI,KAAK,CAAC,EAEpE,MAAM,IAAI,MAAM,+BAA+B,EAIjD,GACED,IACC,CAAC,MAAM,QAAQA,EAAO,OAAO,GAC5BA,EAAO,QAAQ,KACZC,GAAQ,CAACA,GAAO,OAAOA,GAAQ,UAAY,CAACA,EAAI,KAAK,CACxD,GACA,CAACD,EAAO,OAEV,MAAM,IAAI,MAAM,2BAA2B,EAI7C,IAAME,GAAUJ,EAAO,GAAKC,EAGtBI,EAAQ,KAAK;AAAA,aAEjBP,EAAQ,SAAW,GAAKA,EAAQ,CAAC,IAAM,IACnC,KAAK,OACL,KAAK,IAAIA,CAAO,CACtB;AAAA,WACO,KAAK,IAAID,CAAK,CAAC;AAAA,MAEpBK,GAAUA,EAAO,OAASA,EAAO,SAAW,MAAM,QAAQA,EAAO,OAAO,EACpE,KAAK;AAAA,oBACKA,EAAO,QACZ,IACEC,GACC,KAAK,MAAM,KAAK,IAAIA,CAAG,CAAC,UAAU,IAAMD,EAAO,MAAQ,GAAG,EAC9D,EACC,OAAO,CAACI,EAAKC,EAAWC,IACvBA,IAAQ,EAAID,EAAY,KAAK,MAAMD,CAAG,OAAOC,CAAS,EACxD,CAAC;AAAA,YAEL,KAAK,KACX;AAAA,MACER,EAAU,KAAK,eAAe,KAAK,MAAMA,CAAO,EAAE,GAAK,KAAK,KAAK;AAAA,YAC3DE,CAAQ,WAAWG,CAAM;AAAA,IAGjC,OAAIR,IAAO,MAAMS,EAAM,SAAS,GACjB,MAAMA,CAEvB,GACF","names":["EasyPG","sql","params","__async","debug","table","columns","orderBy","page","pageSize","search","col","offset","query","acc","condition","idx"]}